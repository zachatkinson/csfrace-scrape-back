[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "csfrace-scraper"
version = "1.4.1"
description = "WordPress to Shopify content converter for CSFrace website migration"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "CSFrace Development Team", email = "dev@csfrace.com"}
]
maintainers = [
    {name = "CSFrace Development Team", email = "dev@csfrace.com"}
]
keywords = ["scraping", "wordpress", "shopify", "content-migration"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Markup :: HTML",
]
requires-python = ">=3.13"
dependencies = [
    "aiohttp>=3.8.0",
    "alembic>=1.16.4",
    "asyncio-throttle>=1.0.2",  # For advanced rate limiting
    "asyncpg>=0.30.0",
    "beautifulsoup4>=4.13.5",
    "bleach>=6.2.0",
    "fastapi[standard]>=0.116.1",  # Includes: httpx, email-validator, python-multipart, jinja2, uvicorn
    "lxml>=4.9.0",  # BeautifulSoup parser backend for performance
    "playwright>=1.40.0",
    "psycopg[binary]>=3.2.0",
    "pydantic>=2.9.0,<2.10.0",  # Compatible with Safety 3.6.1
    "pydantic-settings>=2.10.1",
    "PyYAML>=6.0.2",
    "rich>=14.1.0",
    "sqlalchemy[asyncio]>=2.0.32",
    "structlog>=23.0.0",
    "tenacity>=8.2.0",
    "tinycss2>=1.4.0",  # Required by bleach for CSS sanitization
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "ruff>=0.1.0",
    "isort>=5.12.0",
    "autoflake>=2.2.0",
    "pre-commit>=3.3.0",
    "mypy>=1.5.0",
    "bandit>=1.7.5",
    "safety>=3.6.1",
    "pip-audit>=2.6.0",
    "detect-secrets>=1.4.0",
    "types-psutil>=5.9.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",  # For parallel test execution
    "pytest-postgresql>=6.0.0",  # PostgreSQL test fixtures
    "testcontainers>=4.0.0",  # PostgreSQL test containers
    "aioresponses>=0.7.4",
    "hypothesis>=6.82.0",
    "factory-boy>=3.3.0",
    "freezegun>=1.2.2",
    "memory-profiler>=0.61.0",
]
monitoring = [
    "prometheus-client>=0.17.0",
    "sentry-sdk>=1.32.0",
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/zachatkinson/csfrace-scrape"
Documentation = "https://github.com/zachatkinson/csfrace-scrape#readme"
Repository = "https://github.com/zachatkinson/csfrace-scrape.git"
"Bug Tracker" = "https://github.com/zachatkinson/csfrace-scrape/issues"

[project.scripts]
csfrace-scraper = "src.main:main"

# Black configuration
[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
    | \.venv
    | \.tox
    | \.pytest_cache
    | __pycache__
    | build
    | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["src"]
known_third_party = [
    "aiohttp",
    "asyncio",
    "beautifulsoup4", 
    "bleach",
    "click",
    "httpx",
    "pydantic",
    "pytest",
    "structlog",
    "tenacity",
]

# Ruff configuration (replaces flake8, isort, and more)
[tool.ruff]
target-version = "1.4.1"
line-length = 100
exclude = [
    ".git",
    ".venv",
    ".tox",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "S",   # bandit (security)
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert (we use it in tests)
    "S324",  # probable use of insecure hash functions (md5 is ok for hashing URLs)
    "B904",  # within except clause, raise exceptions with raise ... from err (optional)
    "ARG002", # unused method argument (common in interfaces)
    "B027",  # empty method in abstract base class (allowed)
    "S112",  # try-except-continue (acceptable pattern)
    "B007",  # loop control variable not used (acceptable)
    "S110",  # try-except-pass (acceptable for intentional cleanup logic)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["S", "ARG", "SIM117", "B017", "F841"]  # Allow security issues, unused args, nested with, Exception assertions, unused vars in tests
"src/monitoring/grafana.py" = ["S105"]  # Allow placeholder password constant that forces production password change

# MyPy configuration
[tool.mypy]
python_version = "1.4.1"
warn_unused_configs = true
show_error_codes = true
# More relaxed settings for practical development
disallow_untyped_defs = false
disallow_incomplete_defs = false 
no_implicit_optional = false
warn_return_any = false
# Still catch serious issues
warn_no_return = true
warn_unreachable = false  # BeautifulSoup causes many false positives

[[tool.mypy.overrides]]
module = [
    "beautifulsoup4.*",
    "bleach.*", 
    "memory_profiler.*",
    "aioresponses.*",
    "aiofiles.*",
    "redis.*",
]
ignore_missing_imports = true

# Ignore BeautifulSoup-heavy modules until we add proper type guards
[[tool.mypy.overrides]]
module = [
    "src.processors.html_processor",
    "src.processors.metadata_extractor",
    "src.plugins.examples.seo_metadata_plugin",
]
ignore_errors = true

# Ignore complex caching modules that need significant refactoring
[[tool.mypy.overrides]]
module = [
    "src.caching.*",
    "src.batch.processor",
    "src.utils.robots",
    "src.utils.retry", 
    "src.plugins.base",
    "src.plugins.registry",
    "src.plugins.manager",
    "src.processors.image_downloader",
    "src.core.config",
    "src.api.*",
]
ignore_errors = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=60",
    "-ra",  # show all test results
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests", 
    "performance: marks tests as performance tests",
    "e2e: marks tests as end-to-end tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py", 
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used test

# autoflake configuration
[tool.autoflake]
remove-all-unused-imports = true
remove-unused-variables = true
remove-duplicate-keys = true
expand-star-imports = true

[dependency-groups]
dev = [
    "aiofiles>=24.1.0",
    "aiohttp>=3.12.15",
    "aioresponses>=0.7.8",
    "alembic>=1.16.4",
    "asyncio-throttle>=1.0.2",
    "asyncpg>=0.30.0",
    "autoflake>=2.3.1",
    "bandit[sarif]>=1.8.6",
    "beautifulsoup4>=4.13.5",
    "black>=25.1.0",
    "bleach>=6.2.0",
    "build>=1.3.0",
    "click>=8.1.8",
    "detect-secrets>=1.5.0",
    "email-validator>=2.0.0",
    "fastapi[standard]>=0.116.1",
    "httpx[http2]>=0.28.1",
    "hypothesis>=6.138.3",
    "ipdb>=0.13.0",
    "ipython>=8.18.1",
    "isort>=6.0.1",
    "line-profiler>=4.1.0",
    "lxml>=6.0.1",
    "memory-profiler>=0.61.0",
    "mypy>=1.17.1",
    "pip-audit>=2.9.0",
    "pre-commit>=4.3.0",
    "psutil>=5.9.0",
    "pydantic>=2.9.0,<2.10.0",  # Compatible with Safety 3.6.1
    "python-multipart>=0.0.20",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-benchmark>=5.1.0",
    "pytest-cov>=6.2.1",
    "pytest-xdist>=3.3.0", # For parallel test execution in CI
    "playwright>=1.40.0",
    "pyyaml>=6.0.2",
    "redis[hiredis]>=6.4.0",
    "rich>=14.1.0",
    "ruff>=0.12.10",
    "safety>=3.6.1",
    "setuptools>=80.9.0",
    "sqlalchemy[asyncio]>=2.0.32",
    "psycopg[binary]>=3.2.0",
    "structlog>=25.4.0",
    "tenacity>=9.1.2",
    "twine>=6.1.0",
    "types-beautifulsoup4>=4.12.0",
    "types-pyyaml>=6.0.0",
    "types-requests>=2.31.0",
    "urllib3>=2.5.0",
    "uvicorn[standard]>=0.35.0",
    "wheel>=0.45.1",
    "testcontainers>=4.12.0",
    "types-psutil>=7.0.0.20250822",
]

# Python Semantic Release configuration - Best Practices 2025
[tool.semantic_release]
version_toml = [
    "pyproject.toml:project.version"  # Update project version in [project] section only
]
version_variables = [
    "src/__init__.py:__version__"  # Also update package __version__ if it exists
]

# Build configuration  
build_command = "uv build"
build_command_env = []

# Commit and changelog configuration
commit_parser = "conventional"  # Use Conventional Commits standard
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
changelog_file = "CHANGELOG.md"

# Remote configuration
upload_to_pypi = false
upload_to_release = true
remove_dist = false

# Branch configuration
branches = [
    { match = "(main|master)", prerelease = false }
]

# Version control
allow_zero_version = false  
major_on_zero = true

# Changelog configuration
[tool.semantic_release.changelog]
template_dir = "templates"
exclude_commit_patterns = [
    "chore\\(deps\\).*",  # Ignore dependency update commits
    "chore\\(release\\).*",  # Ignore release commits
    "docs: update.*",  # Ignore simple doc updates
]

