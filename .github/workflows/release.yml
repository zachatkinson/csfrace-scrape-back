name: Semantic Release

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - 'LICENSE'
      - '.gitignore'
      - '.pre-commit-config.yaml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel releases

env:
  PYTHON_VERSION: "3.13"
  UV_VERSION: "0.8.13"

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
      
      - name: Install dependencies
        run: |
          uv sync --group dev
      
      - name: Run quality checks before release
        run: |
          echo "üîç Running pre-release quality checks..."
          
          # Linting
          uv run ruff check src/ tests/
          
          # Formatting check
          uv run ruff format --check src/ tests/
          
          # Type checking (non-blocking for now)
          uv run mypy src/ || echo "‚ö†Ô∏è Type checking failed but continuing..."
          
          # Security scanning
          uv run bandit -r src/ --format json --output bandit-report.json || true
          
          echo "‚úÖ Quality checks completed"
      
      - name: Run tests
        run: |
          echo "üß™ Running core test suite (excluding database/integration tests)..."
          # Run lightweight tests excluding database integration and performance tests
          # This matches cross-platform testing approach for fast semantic release validation
          uv run pytest tests/utils/ tests/config/ tests/caching/test_file_cache.py tests/batch/test_processor.py tests/test_main.py tests/unit/ -k "not integration and not performance and not e2e and not database" --cov=src --cov-report=xml --cov-report=term-missing --tb=short --maxfail=5
          echo "‚úÖ Core tests completed"
      
      - name: Install python-semantic-release
        run: |
          uv add --group dev python-semantic-release
      
      
      - name: Build package
        run: |
          echo "üì¶ Building Python package..."
          uv build
          
          # Verify build
          ls -la dist/
          echo "‚úÖ Package build completed"
      
      - name: Run python-semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üöÄ Running Python semantic release..."
          uv run semantic-release version --print
          uv run semantic-release publish
      
      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            bandit-report.json
            coverage.xml
          retention-days: 30
      
      - name: Post-release cleanup
        if: always()
        run: |
          echo "üßπ Cleaning up temporary files..."
          echo "‚úÖ Cleanup completed (python-semantic-release handles cleanup automatically)"

  # Optional: Notify on release
  notify:
    name: Notify Release
    needs: release
    runs-on: ubuntu-latest
    if: needs.release.result == 'success'
    
    steps:
      - name: Get release info
        id: release
        run: |
          echo "Release completed successfully!"
          # You can add Slack/Discord/email notifications here