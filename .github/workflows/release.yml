name: Semantic Release

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - 'LICENSE'
      - '.gitignore'
      - '.pre-commit-config.yaml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel releases

env:
  PYTHON_VERSION: "3.13"
  UV_VERSION: "0.8.13"

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
      
      - name: Install dependencies
        run: |
          uv sync --group dev
      
      - name: Run quality checks before release
        run: |
          echo "🔍 Running pre-release quality checks..."
          
          # Linting
          uv run ruff check src/ tests/
          
          # Formatting check
          uv run ruff format --check src/ tests/
          
          # Type checking (non-blocking for now)
          uv run mypy src/ || echo "⚠️ Type checking failed but continuing..."
          
          # Security scanning
          uv run bandit -r src/ --format json --output bandit-report.json || true
          
          echo "✅ Quality checks completed"
      
      - name: Run tests
        run: |
          echo "🧪 Running core test suite (excluding database/integration tests)..."
          # Run lightweight tests excluding database integration and performance tests
          # This matches cross-platform testing approach for fast semantic release validation
          uv run pytest tests/utils/ tests/config/ tests/caching/test_file_cache.py tests/batch/test_processor.py tests/test_main.py tests/unit/ -k "not integration and not performance and not e2e and not database" --cov=src --cov-report=xml --cov-report=term-missing --tb=short --maxfail=5
          echo "✅ Core tests completed"
      
      - name: Setup Node.js for semantic-release
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github @semantic-release/exec
      
      - name: Create semantic-release config
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["master"],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator", 
              "@semantic-release/changelog",
              [
                "@semantic-release/exec",
                {
                  "prepareCmd": "uv run python scripts/update_version.py ${nextRelease.version}",
                  "publishCmd": "echo 'Version ${nextRelease.version} prepared for release'"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md", "pyproject.toml"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": [
                    {
                      "path": "dist/*.whl",
                      "label": "Python Wheel"
                    },
                    {
                      "path": "dist/*.tar.gz", 
                      "label": "Source Distribution"
                    }
                  ]
                }
              ]
            ]
          }
          EOF
      
      - name: Create version update script
        run: |
          mkdir -p scripts
          cat > scripts/update_version.py << 'EOF'
          #!/usr/bin/env python3
          """Update version in pyproject.toml for semantic release."""
          
          import sys
          import re
          from pathlib import Path
          
          def update_version(new_version):
              """Update version in pyproject.toml"""
              pyproject_path = Path("pyproject.toml")
              
              if not pyproject_path.exists():
                  print(f"❌ pyproject.toml not found")
                  sys.exit(1)
              
              content = pyproject_path.read_text()
              
              # Update version line
              version_pattern = r'version = "[^"]+"'
              new_version_line = f'version = "{new_version}"'
              
              if re.search(version_pattern, content):
                  updated_content = re.sub(version_pattern, new_version_line, content)
                  pyproject_path.write_text(updated_content)
                  print(f"✅ Updated version to {new_version} in pyproject.toml")
              else:
                  print(f"❌ Could not find version line in pyproject.toml")
                  sys.exit(1)
          
          if __name__ == "__main__":
              if len(sys.argv) != 2:
                  print("Usage: python update_version.py <version>")
                  sys.exit(1)
              
              new_version = sys.argv[1]
              update_version(new_version)
          EOF
          
          chmod +x scripts/update_version.py
      
      - name: Build package
        run: |
          echo "📦 Building Python package..."
          uv build
          
          # Verify build
          ls -la dist/
          echo "✅ Package build completed"
      
      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "🚀 Running semantic release..."
          semantic-release
      
      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            bandit-report.json
            coverage.xml
          retention-days: 30
      
      - name: Post-release cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up temporary files..."
          rm -f .releaserc.json
          rm -rf scripts/
          echo "✅ Cleanup completed"

  # Optional: Notify on release
  notify:
    name: Notify Release
    needs: release
    runs-on: ubuntu-latest
    if: needs.release.result == 'success'
    
    steps:
      - name: Get release info
        id: release
        run: |
          echo "Release completed successfully!"
          # You can add Slack/Discord/email notifications here